#!/bin/sh
# showhelp
# show help for shelib-style inline document

showhelp(){
  # list subcommand description
  showhelp_inline(){
    for shelib_k in \
      '\*' \
      "-vE ^.+(\*|${SHELIB_HELP_MISC:-MISC|}BREAK_OPT).*$" \
      "-E ^[^\\\*]+BREAK_OPT" ; do 
        showhelp_core ${1:?showhelp_inline: arguemnt_needed} \
          | grep $shelib_k \
          | sed -r -e "s/(\)|\|).*//g" -e s/\#\#\.\+//g \
          | grep -vE "^[[:blank:]]*$" \
          | tr -d \\\ \
          | tr \\\n \\\| \
          | sed -r -e s/\\\|\ \*\$// \
          | sed -r -e s/\\\|-//g \
	  || return 1
    done | sed -r \
      -e "s/[[:alnum:]\*]-/&[/g" \
      -e "s/-\[/] [-/g" 
  }
  set_help_header(){
    : ${1:?shelib help header must be set};
    help_header=${1:-GOCHAS_SHELIB_HELPME_HOGE};
  }
  get_help_header(){ echo ${help_header:?shelib help_header not set!}; }

  showhelp_core(){
    set_help_header $1; get_help_header > /dev/null;
    grep -EA100 \^\ \*\#"`get_help_header`" `which $this` \
      | grep -EB100 \^\ \*\#"`get_help_header`" \
      | grep -A100 case\ \\\$1 \
      | grep -B100 esac\ \*\$ \
      | grep -vE "[[:space:]^](case|esac)[[:space:]$]" \
      | grep -E "([[:blank:]]*[[:alnum:]]+\)|[[:blank:]]*##.+)" \
      || return 1
  }

  # generate help description from comment lines
  showhelp_detail(){
    ## show help header
    set_help_header $1
    echo $1 | sed -r -e s/SHELIB_//g -e s/\$/:/ | tr A-Z a-z | tr -d \\\n
    ## show help body
    showhelp_core ${1:?showhelp_detail: argument needed} \
      | sed -r -e s/\^/SOL/g \
               -e "s/SOL[[:blank:]]*##/\t##/g" \
      | tr -d \\\n \
      | sed -e s/SOL/\\\n/g \
      | tabfix \
      | grep -v ${SHELIB_HELP_MISC:-MISC} || return 1
      echo;
  }

  chk_helpdoc_exist(){
    if showhelp_core ${1:?chk_helpdoc_exist: argument needed} > /dev/null 2> /dev/null ; then return 0;
    else return 1; 
    fi
  }

  show_usage(){
    chk -e $1
    case $1 in
      SHELIB_OPTIONS|SHELIB_SUBCOMMANDS) : ;;
      *) return 0 ;;
    esac
    echo \ \ $this [`showhelp_inline $1`]
  }
  show_manifest(){
    echo ${this}${SHELIB_MODULE_VERSION:+-$SHELIB_MODULE_VERSION}
    echo ${SHELIB_MODULE_DESC:+\ \ desc:   $SHELIB_MODULE_DESC}
    test ! -z "$SHELIB_MODULE_SHORT_USAGE" \
      && echo \ \ usage: $SHELIB_MODULE_SHORT_USAGE
  }
  show_copyleft(){
    echo \ \ \(packaged by ${MODULE_AUTHER_NAME} \<${MODULE_AUTHER_EMAIL}\>\)
  }

  unset_internal(){
    for shelib_k in \
      show_usage \
      show_manifest \
      chk_helpdoc_exist \
      showhelp_core \
      showhelp_detail \
      showhelp_inline \
      set_help_header unset_internal\
      get_help_header unset_internal\
      ; do
      unset $shelib_k; done
  }

  show_manifest
  test "$1" = "--short" || echo usage:; 
  for shelib_i in SHELIB_OPTIONS SHELIB_SUBCOMMANDS; do 
    chk_helpdoc_exist $shelib_i && show_usage $shelib_i; done
  echo;
  test "$1" = "--short" || \
    for shelib_i in SHELIB_OPTIONS SHELIB_SUBCOMMANDS; do 
      chk_helpdoc_exist $shelib_i && showhelp_detail $shelib_i ; done
  show_copyleft
  unset_internal
}
