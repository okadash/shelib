#!/bin/sh
# shelib function initiator command
cook(){ #<shelib function> #$@

  # shelib global variables
  SHELIB_DIR=${SHELIB_DIR:-$HOME/.shef/lib}

  #library loading
  for shelib_i in ${SHELIB_DIR:?shelib_root not set}/core/* ; do
    test -f $shelib_i  && . $shelib_i; 
  done

  case $1 in
    ##show shelib version
    -V|--version)
      echo shelib-${SHELIB_MODULE_VERSION:?shelib version not defined} \(core/cook\); exit;;
    ##invoke shelib function with verbose mode
    -v)
      set -o verbose; shift;;
    ##invoke shelib function with xtrace mode
    -x)
      set -o xtrace; shift;;
    *) # check existence of an executable $1 in PATH
      command -v $1 > /dev/null || throw $1 not found in \$PATH ;;
  esac


  # if function $1 not found, try to load it from the executable in PATH
  type $1 | grep -v / > /dev/null && return 0 || . `command -v $1`;
  $@ || throw shelib function broken;

  ## call shelib execution stack
  if test ${shelib_uncook:=0} != 1; then


    # set callstack name $this
    this=$1
    # set readonly callstack identifier $this_id
    this_id="$(genseed 10)"
    : ${this_swp:=}
    : ${this_id_swp:=}

    sanitize $this_id
    : ${1:?cook: at least one argument needed, abort!};

    # garbage collector initialization
    setvar gc_target "gc_target"

    export shelib_uncook=1;

    ## todo: run module.deps if exist
    type loadmod > /dev/null 2> /dev/null && loadmod
    ## implicit module loading
    test -d $SHELIB_DIR/$1 && require @$1;
    ## todo: load default.env as an external file
    type loadenv > /dev/null 2> /dev/null && loadenv
    ## remove function name itself
    shift;
    callstack $@;
  fi

  # garbage collection for required functions
  unset `getvar gc_target`
  
  return 0;
}
cook $@
